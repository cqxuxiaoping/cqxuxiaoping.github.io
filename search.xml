<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python学习笔记(4):常用的组合数据类型]]></title>
      <url>http://cqxuxiaoping/github.io/2016/08/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h2><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表:list"></a>列表:list</h3><h4 id="列表的特点"><a href="#列表的特点" class="headerlink" title="列表的特点:"></a>列表的特点:</h4><ul>
<li>用方括号[]括起来</li>
<li>内容的元素用逗号”,”间隔开</li>
<li>各元素可以是各种数据类型:字符型,整数型,浮点型,列表,字典,均可</li>
<li>列表内元素的下标是0</li>
</ul>
<h4 id="列表的运用"><a href="#列表的运用" class="headerlink" title="列表的运用"></a>列表的运用</h4><h5 id="列表元素的索引-取列表中的元素"><a href="#列表元素的索引-取列表中的元素" class="headerlink" title="列表元素的索引:取列表中的元素"></a>列表元素的索引:取列表中的元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,&apos;adggd&apos;,3,[&apos;x&apos;,&apos;y&apos;,&apos;z&apos;],4,5]    #此为初始化列表</div><div class="line">print(a)</div><div class="line">[1,2,&apos;adggd&apos;,3,[&apos;x&apos;,&apos;y&apos;,&apos;z&apos;],4,5]</div><div class="line"> print(a[2])</div><div class="line">adggd</div><div class="line">print(a[4][1])      #要取列表中第几个元素,就在列表名后用方括号里面输入第几(注意:下标是0开始)</div><div class="line">y</div></pre></td></tr></table></figure>
<h5 id="列表元素的编辑"><a href="#列表元素的编辑" class="headerlink" title="列表元素的编辑"></a>列表元素的编辑</h5><ul>
<li>列表元素的添加:在最后添加一个元素,用: 列表名.append(新元素)—<strong>对比:字符串无append这个添加功能</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">a.append(&quot;ok&quot;)</div><div class="line">print(a)</div><div class="line">[1,2,3,4,5,6,&quot;ok&quot;]</div></pre></td></tr></table></figure>
<ul>
<li>列表元素的插入:在列表元素中间或最前面插入一个新元素,用: 列表名.insert(插入位置,新插入的元素)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">a.insert(4,100)    #在列表的第四个元素位置插入整数100</div><div class="line">print(a)</div><div class="line">[1,2,3,4,100,5,6]</div><div class="line">a.insert(0,999)   #再在列表的第0个元素位置(即最前面 )插入整数999</div><div class="line">print(a)</div><div class="line">[999,1,2,3,4,100,5,6]</div></pre></td></tr></table></figure>
<ul>
<li>列表元素的修改:用赋值的方式,将第几个元素修改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">a[2]=688    #将第3个元素即整数&apos;3&apos;修改为整数&apos;688&apos;</div><div class="line">print(a)</div><div class="line">[1,2,688,4,5,6]</div></pre></td></tr></table></figure>
<ul>
<li>列表元素的删除:列表名.pop(元素位置)</li>
</ul>
<p><strong>删除最后一位元素:列表名.pop(),里面为空</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">a.pop()    #将最后那个元素删除</div><div class="line">print(a)</div><div class="line">[]1,2,3,4,5]</div></pre></td></tr></table></figure>
<p><strong>删除第N位元素:列表名.pop(N)</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">a.pop(3)    #将第4元素删除</div><div class="line">print(a)</div><div class="line">=[1,2,3,5,6]</div></pre></td></tr></table></figure>
<h5 id="列表地址的传引用-相当于”传址”"><a href="#列表地址的传引用-相当于”传址”" class="headerlink" title="列表地址的传引用,相当于”传址”"></a>列表地址的传引用,相当于”传址”</h5><p><strong>首先,对比一下变量之间传值的区别</strong>:把变量a的值传给变量b,变量b的值变了,变量a的值不会改变,这叫”传值”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=123 </div><div class="line">b=a</div><div class="line">b=456</div><div class="line">print(b)</div><div class="line">456</div><div class="line">print(a)</div><div class="line">123</div></pre></td></tr></table></figure>
<p><strong>其次,看一下列表之间传引用的区别</strong>:把列表a的传引用地址传给变量b,变量b的值变了,变量a的也会发生改变,这叫”传引用”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">b=a</div><div class="line">b[2]=99</div><div class="line">print(b)</div><div class="line">[1,2,99,4,5,6]</div><div class="line">print(a)</div><div class="line">[1,2,99,4,5,6]</div></pre></td></tr></table></figure>
<p><strong>最后,看一下列表之间想达到传值的效果</strong>:把列表a的值传给列表b,列表b的值变了,列表a的值不会改变,采取方法,传的列表后面加上[:],相当于用[:]就是把a列表的值复制了,并传给列表b</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6]</div><div class="line">b=a[:]</div><div class="line">b[2]=99</div><div class="line">print(b)</div><div class="line">[1,2,99,4,5,6]</div><div class="line">print(a)</div><div class="line">[1,2,3,4,5,6]</div></pre></td></tr></table></figure>
<h5 id="列表的切片处理"><a href="#列表的切片处理" class="headerlink" title="列表的切片处理:"></a>列表的切片处理:</h5><p>方括号里用冒号[:],前面跟不同的整数<br>切片的特点:前闭后开,即前面包括,后面不包括<br><strong>列表的切片</strong></p>
<ul>
<li>切取第N个(包括第N个)元素到最后一个元素,方法:[N:]**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">b=a[2:]</div><div class="line">print(a)</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line">print(b)</div><div class="line">[3,4,5,6,7]</div></pre></td></tr></table></figure>
<ul>
<li>切取最前面的元素到第N个前面(不包括第N个)那个元素,方法:[:N]**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">b=a[:2]</div><div class="line">print(a)</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line">print(b)</div><div class="line">[1,2]</div></pre></td></tr></table></figure>
<ul>
<li>切取第N个(包括第N个)到第M个(不包括第M个)之间的元素,方法:[N:M]**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">b=a[2:5]</div><div class="line">print(a)</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line">print(b)</div><div class="line">[3,4,5]</div></pre></td></tr></table></figure>
<ul>
<li>切取倒数第N个元素,方法:[-N]**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">b=a[-1]</div><div class="line">print(b)</div><div class="line">7</div><div class="line">c=a[-2]</div><div class="line">print(c)</div><div class="line">6</div></pre></td></tr></table></figure>
<ul>
<li>切取第N个(包括N)到倒数第M个(不包括M)元素,方法:[N,-M]**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">b=a[2:-2]</div><div class="line">print(b)</div><div class="line">[3,4,5]</div></pre></td></tr></table></figure>
<ul>
<li>步进式跳着切取元素,在切片后面用冒号<code>:</code>,紧跟步进数值,方法:[M:N:K],<code>K</code>为步长**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">print(a[2:6:2])  #从第三个元素3(含)切片到第七个元素7(不含),步长为2,即隔一个元素切取</div><div class="line">[3,5]</div><div class="line">b=a[:]  #结果还是为:[1,2,3,4,5,6,7],相当于复制,未切片,见前面&quot;**列表传址引用**&quot;</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line">b=a[::]  #结果还是为:[1,2,3,4,5,6,7],相当于复制,未切片</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line">b=a[::1]   #步长为1,结果还是为:[1,2,3,4,5,6,7],相当于复制,未切片</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line">c=a[::2]   #结果为:[1,3,5,7],全部切片,步长值为2,即隔一个元素切片</div><div class="line">[1,3,5,7]</div><div class="line">d=a[::3]   #结果为:[1,4,7]</div><div class="line">[1,4,7]</div></pre></td></tr></table></figure>
<ul>
<li>元素倒序排列,方法:[::-N]**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3,4,5,6,7]</div><div class="line">b=a[::-1]   #结果为:</div><div class="line">[7, 6, 5, 4, 3, 2, 1]</div><div class="line">c=a[::-2]   #结果为:</div><div class="line">[7, 5, 3, 1]</div><div class="line">d=a[::-3]   #结果为:</div><div class="line">[7, 4, 1]</div></pre></td></tr></table></figure>
<h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串:string"></a>字符串:string</h3><h4 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点:"></a>字符串的特点:</h4><h5 id="列表的特点及与列表相比的区别"><a href="#列表的特点及与列表相比的区别" class="headerlink" title="列表的特点及与列表相比的区别:"></a>列表的特点及与列表相比的区别:</h5><ul>
<li>用单引号’’或双引号””引起来—而列表是用方括号[]括起来</li>
<li>内容的元素不用需用逗号间隔开—而列表必须用逗号”,”间隔开</li>
<li>各元素是字符型—而列表的元素可以是各种数据类型:字符型,整数型,浮点型,列表,字典均可</li>
<li>字符串内元素的下标是0—列表也一样</li>
<li>切片特点:前闭后开(即前面包括后面不包括)</li>
<li>字符串不能直接添加(追加)\插入\修改\删除字符,其他切片功能与列表相似</li>
</ul>
<h5 id="字符串的运用"><a href="#字符串的运用" class="headerlink" title="字符串的运用"></a>字符串的运用</h5><p><strong>字符串与列表相同之处:切片完全一样</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a=&apos;abcdefg&apos;</div><div class="line">b=a[2]   #结果为: c</div><div class="line">c=a[2:]  #结果为: cdefg</div><div class="line">d=a[:2]   #结果为: ab</div><div class="line">e=a[2:5]  #结果为: cde</div><div class="line">f=a[2:-3]  #结果为: cd</div><div class="line">g=a[::1]   #结果为: abcdefg,相当于复制,未切片</div><div class="line">h=a[::-1]  #结果为:gfedcba,全部倒序排列</div><div class="line">i=a[::-2]  #结果为:geca,倒序跳着间隔一个,即间隔(含)两个切取</div></pre></td></tr></table></figure>
<p><strong>字符串与列表不一样的地方:无如下编辑功能</strong></p>
<blockquote>
<p>j=a.append()   #字符串跟列表不一样,无append这个添加元素功能<br>k=a.insert(1,’x’)  #字符串跟列表不一样,无insert这个插入元素功能<br>l=a.pop(0)  #字符串跟列表不一样,无pop这个删除元素功能<br>a[1]=’x’   #字符串跟列表不一样,无修改元素的功能</p>
</blockquote>
<h3 id="元组-touple"><a href="#元组-touple" class="headerlink" title="元组:touple"></a>元组:touple</h3><p> 元组用<code>()</code>表示,里面的元素用<code>,</code>隔开</p>
<h4 id="元组的特点："><a href="#元组的特点：" class="headerlink" title="元组的特点："></a>元组的特点：</h4><ul>
<li>元组元素的索引、切片方法跟列表一样如:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=(1,2,3,4,5)   #初始化元组</div><div class="line">b=a[2]</div><div class="line">print(b) #结果为：</div><div class="line">3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=(1,2,3,4,5)   #初始化元组</div><div class="line">b=a[2:4]</div><div class="line">print(b) #结果为：</div><div class="line">(3,4)</div></pre></td></tr></table></figure>
<ul>
<li>元组内元素不能直接用append,insert,赋值等方式修改<br>元组内元素若要修改，需要先转成列表（list），修改后再从列表转为元组(tuple)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a=(1,2,3,4,5,6)</div><div class="line">b=list(a)  #元组转换为了列表b：[1, 2, 3, 4, 5, 6]</div><div class="line">print(b)</div><div class="line">[1, 2, 3, 4, 5, 6]</div><div class="line">b[2]=99   #用赋值的方式，将列表b第二个元素3修改为99</div><div class="line">c=tuple(b)  #又将列表b转换在元组c:(1, 2, 99, 4, 5, 6)</div><div class="line">print(c)</div><div class="line">(1, 2, 99, 4, 5, 6)</div></pre></td></tr></table></figure>
<p>元组内的元素若是列表,则可以对里面的列表元素内的列表元素进行修改:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=(1,2,3,4,[“X”,”y”,”z”],6)</div><div class="line">a[4][1]=”此处修改了”</div><div class="line">print(a)</div><div class="line">(1,2,3,4,[“X”,” 此处修改了”,”z”],6)</div><div class="line">#说明,这里并不是元组的元素被修改了,而是对应元素的列表引用里面的元素被修改了</div></pre></td></tr></table></figure></p>
<ul>
<li>元组的初始化:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A=()  #初始化一个空元组</div><div class="line">B=(“hello”,)   #初始化只有一个元素的元组</div><div class="line">&apos;&apos;&apos;注意一定加逗号`,`若不加逗号`,`,圆括号里面的数据是什么类型,那么初始化的B就是什么类型,而不是元组;</div><div class="line">比如B=(“hello”)就是字符型,B=(4)就是整数int型&apos;&apos;&apos;,而不是元组</div></pre></td></tr></table></figure>
<h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典:dict"></a>字典:dict</h3><h4 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点:"></a>字典的特点:</h4><ul>
<li>字典<code>dict</code>,全称<code>dictionary</code>，在其他语言中也称为<code>map</code>，使用键:值（key:value）存储，具有极快的查找速度。</li>
<li>书写方式用花括号括起来，都是成对出现，前者为key(键值)，后者为value(值)</li>
<li>字典内的各组key和value无序</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;a&apos;:&apos;xyz&apos;,&apos;b&apos;:123,&apos;c&apos;:23.15&#125;</div><div class="line">print(a)    #打印出来实际为如下等多种顺序</div><div class="line">&#123;&apos;c&apos;: 23.15, &apos;a&apos;: &apos;xyz&apos;, &apos;b&apos;: 123&#125;</div></pre></td></tr></table></figure>
<h4 id="字典value读取的方式："><a href="#字典value读取的方式：" class="headerlink" title="字典value读取的方式："></a>字典value读取的方式：</h4><ul>
<li>方式一：<code>key</code>方式:<br>若读取没有的key,则程序将报错</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;a&apos;:&apos;xyz&apos;,&apos;b&apos;:123,&apos;c&apos;:23.15&#125;</div><div class="line">print(a[&apos;a&apos;])   #结果为：</div><div class="line">xyz</div><div class="line">print(a[&apos;e&apos;])  #读取没有的key:&apos;e&apos;时，程序会报错：</div><div class="line">KeyError: &apos;e&apos;</div></pre></td></tr></table></figure>
<ul>
<li>方式二：<code>get</code>方式:<br>若读取没有的key，则程序不会报错，而是打印结果：None,或自定义提示信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;a&apos;:&apos;xyz&apos;,&apos;b&apos;:123,&apos;c&apos;:23.15&#125;</div><div class="line">print(a.get(&apos;b&apos;))  #结果为：</div><div class="line">123</div><div class="line">print(a.get(&apos;e&apos;))  #打印结果：</div><div class="line">None</div><div class="line">print(a.get(&apos;e&apos;,&apos;没有找到!&apos;))   #打印结果：</div><div class="line">没有找到!</div></pre></td></tr></table></figure>
<h4 id="字典的items-方法"><a href="#字典的items-方法" class="headerlink" title="字典的items()方法:"></a>字典的items()方法:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;a&apos;:&apos;xyz&apos;,&apos;b&apos;:123,&apos;c&apos;:23.15&#125;</div><div class="line">k=a.items()</div><div class="line">print(k)  #结果为:</div><div class="line">dict_items([(&apos;b&apos;, 123), (&apos;a&apos;, &apos;xyz&apos;), (&apos;c&apos;, 23.15)])   #注意:此处顺序会变,因为字典的无序性,下面结果也会变</div><div class="line">print(list(k))  #结果为元素是元组的列表或别的顺序列表:</div><div class="line">[(&apos;c&apos;, 23.15), (&apos;b&apos;, 123), (&apos;a&apos;, &apos;xyz&apos;)] </div><div class="line">print(list(k)[1]) #结果为上面列表的第一个元素的元组或别的顺序元组</div><div class="line">(&apos;a&apos;, &apos;xyz&apos;) </div><div class="line">print(list(k)[1][1]) #结果为上面元组的第一个元素 或别的</div><div class="line">xyz</div></pre></td></tr></table></figure>
<h4 id="in判断键值key是否在字典中"><a href="#in判断键值key是否在字典中" class="headerlink" title="in判断键值key是否在字典中:"></a><code>in</code>判断键值<code>key</code>是否在字典中:</h4><p> <code>in</code>方式,可判断相应的键值<code>key</code>是否在此字典之中,若在则返回<code>True</code>,若不在则返回<code>False</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;a&apos;:&apos;xyz&apos;,&apos;b&apos;:123,&apos;c&apos;:23.15&#125;</div><div class="line">&apos;b&apos; in a</div><div class="line">True</div><div class="line">&apos;d&apos; in a </div><div class="line">False</div></pre></td></tr></table></figure>
<h4 id="字典元素的增减"><a href="#字典元素的增减" class="headerlink" title="字典元素的增减"></a>字典元素的增减</h4><ul>
<li>字典元素的添加:是以新赋值的方式实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;x&apos;:&apos;how&apos;,&apos;y&apos;:&apos;are&apos;&#125;</div><div class="line">a[&apos;z&apos;]=&apos;you ?&apos; #给新KEY赋值的方式添加字典元素</div><div class="line">print(a)</div><div class="line">&#123;&apos;z&apos;:&apos;you ?&apos;,&apos;x&apos;:&apos;how&apos;,&apos;y&apos;:&apos;are&apos;&#125;  #字典是无序的,随时打印出来的位置会变</div></pre></td></tr></table></figure>
<ul>
<li>字典元素的删除<br>用pop()方法删除相应的<code>key</code>,其<code>value</code>也一块删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=&#123;&apos;x&apos;:123,&apos;y&apos;:456,&apos;z&apos;:&apos;wow&apos;&#125;</div><div class="line">a.pop(&apos;z&apos;)</div><div class="line">print(a)  #结果为:</div><div class="line">&#123;&apos;x&apos;: 123, &apos;y&apos;: 456&#125;</div></pre></td></tr></table></figure>
<h4 id="由元组构成的列表-可以转成字典"><a href="#由元组构成的列表-可以转成字典" class="headerlink" title="由元组构成的列表,可以转成字典"></a>由元组构成的列表,可以转成字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[(&apos;b&apos;, 123), (&apos;a&apos;, &apos;xyz&apos;), (&apos;c&apos;, 23.15)]</div><div class="line">b=dict(a)</div><div class="line">print(b)  #结果为: ,顺序会变</div><div class="line"> &#123;&apos;a&apos;: &apos;xyz&apos;, &apos;b&apos;: 123, &apos;c&apos;: 23.15&#125;</div><div class="line">print(b[&apos;b&apos;]) #结果为:123 ,取出key&apos;b&apos;对应的value</div><div class="line">123</div></pre></td></tr></table></figure>
<h4 id="字典和列表比较，各自的特点："><a href="#字典和列表比较，各自的特点：" class="headerlink" title="字典和列表比较，各自的特点："></a>字典和列表比较，各自的特点：</h4><h5 id="字典的特点-1"><a href="#字典的特点-1" class="headerlink" title="字典的特点:"></a>字典的特点:</h5><ul>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
<li>需要占用大量的内存，内存浪费多。</li>
</ul>
<h5 id="列表list的特点"><a href="#列表list的特点" class="headerlink" title="列表list的特点:"></a>列表<code>list</code>的特点:</h5><ul>
<li>查找和插入的时间随着元素的增加而增加；</li>
<li>占用空间小，浪费内存很少。<br><strong>所以，dict是用空间来换取时间的一种方法。</strong></li>
</ul>
<h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合:set"></a>集合:set</h3><h4 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点:"></a>集合的特点:</h4><ul>
<li>用花括号,元素间用逗号隔开</li>
<li>转换成集合用:set</li>
<li>集合<code>set</code>和字典<code>dict</code>类似，也是一组<code>key</code>的集合，不同的是集合不存储<code>value</code>。由于<code>key</code>不能重复，所以，在集合<code>set</code>中，没有重复的<code>key</code>。</li>
<li><p><strong>因为由于<code>key</code>不能重复,集合元素的唯一性,所以集合元素不能是可变对象如列表,即列表不能作为集合元素,否则会报错.</strong>试试看:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=&#123;1,2[3,4]&#125;</div><div class="line">#TypeError:unhashable Typle:&apos;list&apos;  #错误的类型:列表</div></pre></td></tr></table></figure>
</li>
<li><p>集合的无序性:集合里面的元素是无序性的,不能直接索引,如:a={1,2,3,4,5},无法通过a[2]的方式索引到里面的元素”3”</p>
</li>
<li>集合的单一性:集合里的元素均是唯一的,不会重复,用此功能,可以将列表转换为集合去重,再转换为列表使用的功能</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[1,2,2,2,3,4,5,6]  #先初始化一个列表a</div><div class="line">b=set(a)  #将列表a转换为集合b,同时去重</div><div class="line">print(b)  #打印结果为:</div><div class="line">&#123;1, 2, 3, 4, 5, 6&#125;</div><div class="line">a=list(b)  #将集合b转换为列表a:[1, 2, 3, 4, 5, 6],已将重复的&quot;2&quot;去掉</div><div class="line">print(a)</div><div class="line">[1, 2, 3, 4, 5, 6]</div></pre></td></tr></table></figure>
<h4 id="集合的三种操作"><a href="#集合的三种操作" class="headerlink" title="集合的三种操作"></a>集合的三种操作</h4><ul>
<li>集合的交集,即求同:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=[1,2,2,2,3,4,5,6,7]  #初始化列表a</div><div class="line">b=[1,2,3,4,5,6,7,8,9]  #初始化列表b</div><div class="line">c=set(a)&amp;set(b)   #列表a及列表b转换成集合,求交集</div><div class="line">print(c)  #结果为:</div><div class="line">&#123;1, 2, 3, 4, 5, 6, 7&#125;</div></pre></td></tr></table></figure>
<ul>
<li>集合的并集,即合并,把所有相同及不同的元素合并在一起,接上示例:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d=set(a)|set(b)</div><div class="line">print(d)  #结果为:</div><div class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</div></pre></td></tr></table></figure>
<ul>
<li>集合的求异:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e=set(b)-set(a)</div><div class="line">print(e)  #结果为:&#123;8, 9&#125;,即把b列表在a列表中没有的元素找出来</div></pre></td></tr></table></figure>
<h4 id="集合的编辑"><a href="#集合的编辑" class="headerlink" title="集合的编辑"></a>集合的编辑</h4><ul>
<li>通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s = set([1, 1, 2, 2, 3, 3])</div><div class="line">s</div><div class="line">&#123;1, 2, 3&#125;  #有重复元素的列表,转换为集合后去重</div><div class="line">s.add(4)  #添加一个元素`4`</div><div class="line">s</div><div class="line">&#123;1, 2, 3, 4&#125;</div><div class="line"> s.add(4)  #重复添加&apos;4&apos;，但不会有效果</div><div class="line"> s</div><div class="line">&#123;1, 2, 3, 4&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过remove(key)方法可以删除集合的指定元素：接上示例:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.remove(4)  #把元素&apos;4&apos;删除</div><div class="line">s</div><div class="line">&#123;1, 2, 3&#125;</div></pre></td></tr></table></figure>
<h2 id="组合数据类型之间的转换"><a href="#组合数据类型之间的转换" class="headerlink" title="组合数据类型之间的转换"></a>组合数据类型之间的转换</h2><h3 id="列表与字符串的转换"><a href="#列表与字符串的转换" class="headerlink" title="列表与字符串的转换"></a>列表与字符串的转换</h3><h4 id="列表转为字符串："><a href="#列表转为字符串：" class="headerlink" title="列表转为字符串："></a>列表转为字符串：</h4><ul>
<li>处理方法：  拼接符.join(列表名)</li>
<li>注意：元素为数值等类型如[1,2,3]这类列表，不能直接拼接</li>
<li>示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[&apos;x&apos;,&apos;y&apos;,&apos;z&apos;]</div><div class="line">b=&apos;&apos;.join(a)    #结果是：</div><div class="line">&apos;xyz&apos;</div><div class="line">c=&apos;*&apos;.join(a)   #结果是：</div><div class="line">&apos;x*y*z&apos;</div><div class="line">print(b)</div><div class="line">print(c)</div></pre></td></tr></table></figure>
<h4 id="字符串转为列表"><a href="#字符串转为列表" class="headerlink" title="字符串转为列表"></a>字符串转为列表</h4><ul>
<li>条件：字符串内，字符之间要有明显的分隔符</li>
<li>处理方法：字符串名.split(‘分隔符’)</li>
<li>示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=&apos;Q_W_E_R_T&apos;</div><div class="line">b=a.split(&apos;_&apos;)</div><div class="line">print(b)  #结果为：</div><div class="line">[&apos;Q&apos;, &apos;W&apos;, &apos;E&apos;, &apos;R&apos;, &apos;T&apos;]</div></pre></td></tr></table></figure>
<h3 id="由成对元素组成的元组所构成的列表-可以转成字典"><a href="#由成对元素组成的元组所构成的列表-可以转成字典" class="headerlink" title="由成对元素组成的元组所构成的列表,可以转成字典"></a>由成对元素组成的元组所构成的列表,可以转成字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[(&apos;b&apos;, 123), (&apos;a&apos;, &apos;xyz&apos;), (&apos;c&apos;, 23.15)]</div><div class="line">b=dict(a)</div><div class="line">print(b)  #结果为: ,顺序会变</div><div class="line"> &#123;&apos;a&apos;: &apos;xyz&apos;, &apos;b&apos;: 123, &apos;c&apos;: 23.15&#125;</div><div class="line">print(b[&apos;a&apos;]) #结果为:123 ,取出`key&apos;:`b&apos;对应的value</div><div class="line">xyz</div></pre></td></tr></table></figure>
<h3 id="列表list、元组tuple、集合set之间相互转换"><a href="#列表list、元组tuple、集合set之间相互转换" class="headerlink" title="列表list、元组tuple、集合set之间相互转换"></a>列表<code>list</code>、元组<code>tuple</code>、集合<code>set</code>之间相互转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3]</div><div class="line">b=(4,5,6)</div><div class="line">c=&#123;7,8,9&#125;</div></pre></td></tr></table></figure>
<h4 id="元组、集合转换成列表list"><a href="#元组、集合转换成列表list" class="headerlink" title="元组、集合转换成列表list"></a>元组、集合转换成列表<code>list</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">list(b)</div><div class="line">[4,5,6]</div><div class="line">list(c)</div><div class="line">[7,8,9]</div></pre></td></tr></table></figure>
<h4 id="列表、集合转换成元组tuple"><a href="#列表、集合转换成元组tuple" class="headerlink" title="列表、集合转换成元组tuple"></a>列表、集合转换成元组<code>tuple</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tuple(a)</div><div class="line">(1,2,3)</div><div class="line">tuple(c)</div><div class="line">(8,9,7)  #因为`c`为集合,是无序组合,位置随时会变,转换时位置不固定</div></pre></td></tr></table></figure>
<h4 id="列表、元组转换成集合set"><a href="#列表、元组转换成集合set" class="headerlink" title="列表、元组转换成集合set"></a>列表、元组转换成集合<code>set</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set(a)</div><div class="line">&#123;1,2,3&#125;</div><div class="line">set(b)</div><div class="line">(4,5,6)</div></pre></td></tr></table></figure>
<h2 id="神奇的加号”-”-即并集"><a href="#神奇的加号”-”-即并集" class="headerlink" title="神奇的加号”+”,即并集"></a>神奇的加号”+”,即并集</h2><ul>
<li>列表+列表=列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=[1,2,3]</div><div class="line">b=[4,5,6]</div><div class="line">c=a+b</div><div class="line">print(c)  #结果为:</div><div class="line">[1, 2, 3, 4, 5, 6]</div></pre></td></tr></table></figure>
<ul>
<li>字符串+字符串=字符串</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=&apos;abc&apos;</div><div class="line">b=&apos;xyz&apos;</div><div class="line">c=a+b</div><div class="line">print(c)  #结果为:</div><div class="line">abcxyz</div></pre></td></tr></table></figure>
<ul>
<li>元组+元组=元组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;)</div><div class="line">b=(1,2,3)</div><div class="line">c=a+b</div><div class="line">print(c)  #结果为:(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 1, 2, 3)</div></pre></td></tr></table></figure>
<ul>
<li>注意:<br>–集合是不能加(+)的,因为两个集合里若有同一元素,根据集合的唯一性,会报错<br>–字典也不能加(+),因为为两个字典若有相同关键字(key),根据字典key的唯一性,也会报错</li>
</ul>
<p><strong>说明</strong>:此文摘录自:<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000" target="_blank" rel="external">链接</a>,并有添加,版权属于原作者。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python学习笔记(3)变量与常量]]></title>
      <url>http://cqxuxiaoping/github.io/2016/08/07/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
      <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="1-变量的类型"><a href="#1-变量的类型" class="headerlink" title="1. 变量的类型"></a>1. 变量的类型</h3><p><strong>变量不仅可以是数字，还可以是任意数据类型。</strong></p>
<p>变量在程序中就是用一个变量名表示，变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头,比如：</p>
<pre><code>a = 1
</code></pre><p>变量a是一个整数。</p>
<pre><code>t_007 = &apos;T007&apos;
</code></pre><p>变量t_007是一个字符串。</p>
<pre><code>Answer = True
</code></pre><p>变量Answer是一个布尔值True。</p>
<h3 id="2-变量的赋值"><a href="#2-变量的赋值" class="headerlink" title="2.变量的赋值"></a>2.变量的赋值</h3><p>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p>
<pre><code>a = 123 # a是整数
print(a)
a = &apos;ABC&apos; # a变为字符串
print(a)
</code></pre><p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</p>
<pre><code>int a = 123; // a是整数类型变量
a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量
</code></pre><p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<p><strong>请不要把赋值语句的等号等同于数学的等号。</strong></p>
<p>比如下面的代码：</p>
<pre><code>x = 10
x = x + 2
</code></pre><p>如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。<br>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p>
<pre><code>a = &apos;ABC&apos;
</code></pre><p>时，Python解释器干了两件事情：</p>
<blockquote>
<p>在内存中创建了一个’ABC’的字符串；<br>在内存中创建了一个名为a的变量，并把它指向’ABC’。</p>
</blockquote>
<p>也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</p>
<pre><code>a = &apos;ABC&apos;
b = a
a = &apos;XYZ&apos;
print(b)
</code></pre><p>最后一行打印出变量b的内容到底是’ABC’呢还是’XYZ’？如果从数学意义上理解，就会错误地得出b和a相同，也应该是’XYZ’，但实际上b的值是<code>&#39;ABC&#39;</code>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p>
<blockquote>
<p>执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，并把a指向’ABC’：<br>执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：<br>执行a = ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：<br>所以，最后打印变量b的结果自然是’ABC’了。</p>
</blockquote>
<h3 id="3-变量的占位替换-也叫”格式化”"><a href="#3-变量的占位替换-也叫”格式化”" class="headerlink" title="3. 变量的占位替换(也叫”格式化”)"></a>3. 变量的占位替换(也叫”格式化”)</h3><h4 id="3-1-方式"><a href="#3-1-方式" class="headerlink" title="3.1 %方式"></a>3.1 <code>%</code>方式</h4><p><code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>
<ul>
<li><strong><code>%s</code>表示用字符串替换</strong></li>
</ul>
<p>如果不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串：</p>
<pre><code>&quot;今天星期%s,气温%s度&quot; % (&quot;三&quot;,28.9)
</code></pre><p>结果为:</p>
<pre><code>&apos;今天星期三,气温28.9度&apos;
</code></pre><ul>
<li><strong><code>%d</code>表示用整数型替换</strong></li>
</ul>
<p>格式化整数还可以指定是否补0、整数的位数</p>
<pre><code>&apos;%2d-%02d&apos; % (3, 1)
</code></pre><p>结果为:</p>
<pre><code>&apos; 3-01&apos; # 注意,3前面有个空格
</code></pre><ul>
<li><strong><code>%f</code>表示用浮点型替换</strong></li>
</ul>
<p>格式化浮点数还可以指定小数的位数</p>
<pre><code>&apos;%.2f&apos; % 3.1415926
</code></pre><p>结果为:</p>
<pre><code>&apos;3.14&apos;
</code></pre><h4 id="3-2-format-方式"><a href="#3-2-format-方式" class="headerlink" title="3.2 {}.format()方式"></a>3.2 <code>{}.format()</code>方式</h4><p>用花括号<code>{}</code>占位,再用<code>format()</code>带入(可批量带入,数据类型自适应)</p>
<pre><code>&apos;今天是{}年{}月{}日,星期{},天气{},气温{}度&apos;.format(2016,4,26,&apos;二&apos;,&apos;晴&apos;,23.25)
</code></pre><p>结果为:</p>
<pre><code>&apos;今天是2016年4月26日,星期二,天气晴,气温23.25度&apos;
</code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，<strong>通常用全部大写的变量名表示常量</strong>：</p>
<pre><code>PI = 3.14159265359
</code></pre><p>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，<strong>用全部大写的变量名表示常量</strong>只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。<br>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法,一种取余:</p>
<h4 id="一种除法是"><a href="#一种除法是" class="headerlink" title="一种除法是/:"></a>一种除法是<code>/</code>:</h4><pre><code>10 / 3
</code></pre><p>结果为:</p>
<pre><code>3.3333333333333335
</code></pre><p><strong><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</strong></p>
<pre><code>9 / 3
</code></pre><p>结果为:</p>
<pre><code>3.0
</code></pre><h4 id="还有一种除法是"><a href="#还有一种除法是" class="headerlink" title="还有一种除法是//"></a>还有一种除法是<code>//</code></h4><p>整除,也称为地板除，两个整数的除法仍然是整数：</p>
<pre><code>10 // 3
</code></pre><p>结果为:</p>
<pre><code>3
</code></pre><p>整数的地板除<code>//</code>永远是整数，即使除不尽。要做精确的除法，使用<code>/</code>就可以。<br>因为<code>//</code>除法只取结果的整数部分</p>
<h3 id="余数运算-，可以得到两个整数相除的余数："><a href="#余数运算-，可以得到两个整数相除的余数：" class="headerlink" title="余数运算%，可以得到两个整数相除的余数："></a>余数运算<code>%</code>，可以得到两个整数相除的余数：</h3><pre><code>10 % 3
</code></pre><p>结果为:</p>
<pre><code>1
</code></pre><p><strong>无论整数做<code>//</code>除法还是<code>%</code>取余数，结果永远是整数</strong>，所以，<strong>整数运算结果永远是精确的</strong>。</p>
<p><strong>说明</strong>:此文摘录自:<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000" target="_blank" rel="external">链接</a>,并有添加,版权属于原作者。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python学习笔记(2):数据类型]]></title>
      <url>http://cqxuxiaoping/github.io/2016/08/06/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p>
<h2 id="整数-int"><a href="#整数-int" class="headerlink" title="整数:int"></a>整数:int</h2><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p>
<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p>
<h2 id="浮点数-Float"><a href="#浮点数-Float" class="headerlink" title="浮点数:Float"></a>浮点数:Float</h2><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p>
<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>
<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串:String"></a>字符串:String</h2><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p>
<h3 id="如果字符串内部既包含’又包含”怎么办？可以用转义字符-来标识，比如："><a href="#如果字符串内部既包含’又包含”怎么办？可以用转义字符-来标识，比如：" class="headerlink" title="如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如："></a>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</h3><pre><code>&apos;I\&apos;m \&quot;OK\&quot;!&apos;
</code></pre><p>表示的字符串内容是：</p>
<pre><code>I&apos;m &quot;OK&quot;!
</code></pre><h3 id="转义字符-可以转义很多字符，比如-n表示换行，-t表示制表符，字符-本身也要转义，所以-表示的字符就是-，可以在Python的交互式命令行用print-打印字符串看看："><a href="#转义字符-可以转义很多字符，比如-n表示换行，-t表示制表符，字符-本身也要转义，所以-表示的字符就是-，可以在Python的交互式命令行用print-打印字符串看看：" class="headerlink" title="转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看："></a>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</h3><pre><code>print(&apos;I\&apos;m ok.&apos;)
I&apos;m ok.

print(&apos;I\&apos;m learning\nPython.&apos;)
I&apos;m learning
Python.

print(&apos;\\\n\\&apos;)
\
\
</code></pre><h3 id="如果字符串里面有很多字符都需要转义，就需要加很多-，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试："><a href="#如果字符串里面有很多字符都需要转义，就需要加很多-，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：" class="headerlink" title="如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试："></a>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</h3><pre><code> print(&apos;\\\t\\&apos;)
\       \

print(r&apos;\\\t\\&apos;)
\\\t\\
</code></pre><h3 id="如果字符串内部有很多换行，用-n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试："><a href="#如果字符串内部有很多换行，用-n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：" class="headerlink" title="如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试："></a>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</h3><pre><code> print(&apos;&apos;&apos;line1
... line2
... line3&apos;&apos;&apos;)
line1
line2
line3
</code></pre><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入。如果写成程序，就是：</p>
<pre><code>print(&apos;&apos;&apos;line1
line2
line3&apos;&apos;&apos;)
</code></pre><p>多行字符串’’’…’’’还可以在前面加上r使用:</p>
<pre><code>print(r&apos;&apos;&apos;line1
line2
line3&apos;&apos;&apos;)
</code></pre><p>结果如下:</p>
<pre><code>line1
line2
line3
</code></pre><h2 id="布尔值-Boolean"><a href="#布尔值-Boolean" class="headerlink" title="布尔值:Boolean"></a>布尔值:Boolean</h2><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True(1)、False(0)两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p>
<blockquote>
<p>True<br>True</p>
<p>False<br>False</p>
<p>3 &gt; 2<br>True</p>
<p>3 &gt; 5<br>False</p>
</blockquote>
<p><strong>布尔值可以用and、or和not运算</strong></p>
<ul>
<li>and运算是与运算，只有所有都为True，and运算结果才是True：</li>
</ul>
<blockquote>
<p>True and True<br>True</p>
<p>True and False<br>False</p>
<p>False and False<br>False</p>
<p>5 &gt; 3 and 3 &gt; 1<br>True</p>
</blockquote>
<ul>
<li>or运算是或运算，只要其中有一个为True，or运算结果就是True：</li>
</ul>
<blockquote>
<p>True or True<br>True</p>
<p>True or False<br>True</p>
<p>False or False<br>False</p>
<p>5 &gt; 3 or 1 &gt; 3<br>True</p>
</blockquote>
<ul>
<li>not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</li>
</ul>
<blockquote>
<p>not True<br>False</p>
<p>not False<br>True</p>
<p>not 1 &gt; 2<br>True</p>
</blockquote>
<ul>
<li>布尔值经常用在条件判断中，比如：</li>
</ul>
<pre><code>if age &gt;= 18:
    print(&apos;adult&apos;)
else:
    print(&apos;teenager&apos;)
</code></pre><h2 id="空值-None"><a href="#空值-None" class="headerlink" title="空值:None"></a>空值:None</h2><ul>
<li><p>值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p>
</li>
<li><p>此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型。</p>
</li>
</ul>
<h2 id="数据类型及转换"><a href="#数据类型及转换" class="headerlink" title="数据类型及转换"></a>数据类型及转换</h2><ol>
<li>整数型：int</li>
<li>字符型（文本型）：str</li>
<li>浮点型（一定有小数位）：float</li>
<li>三种类型的相互转换</li>
</ol>
<ul>
<li>浮点型转为整数型：Int(12.124)=12</li>
<li>字符型转为整数型：Int(‘12’)=12</li>
<li>整数型转为字符型：Str(123)=’123’</li>
<li>浮点型转为字符型：Str(12.123)=’12.123’</li>
<li>整数型转为浮点型：Float(12)=12.0</li>
<li>字符型转为浮点型：Float(’12.123’)=12.123</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h2><ul>
<li><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p>
</li>
<li><p><strong>注意</strong>：Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。</p>
</li>
<li><p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><p>此为摘录并有添加,版权属于原作者,详细移步:<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000" target="_blank" rel="external">摘录链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python学习笔记(1):常用技巧]]></title>
      <url>http://cqxuxiaoping/github.io/2016/08/06/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="Pycharm快捷键"><a href="#Pycharm快捷键" class="headerlink" title="Pycharm快捷键"></a>Pycharm快捷键</h2><ul>
<li>注释(取消注释):CTRL+/</li>
<li>批量缩进:TAB</li>
<li>批量取消缩进:shift+TAB</li>
<li>恢复操作:CTRL+Z</li>
</ul>
<h2 id="求商取整"><a href="#求商取整" class="headerlink" title="求商取整"></a>求商取整</h2><p>(商舍去小数只取整数),用双斜杠,即双除//,对比:</p>
<blockquote>
<p>9//2=4<br>9/2=4.5</p>
</blockquote>
<p>/除出来的结果为浮点</p>
<blockquote>
<p>10/5=2.0</p>
</blockquote>
<p>%除出来的结果为余数</p>
<blockquote>
<p>10%3=1<br>10%5=0</p>
</blockquote>
<h2 id="乘-幂"><a href="#乘-幂" class="headerlink" title="乘/幂"></a>乘/幂</h2><blockquote>
<p>2*3=6<br>2**3=8</p>
</blockquote>
<h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符\"></a>转义符\</h2><ul>
<li>反斜杠\为转义符,让其后的符号输出本身,如:<pre><code>print(&quot;I\&apos;m a sexy man! &quot;)
</code></pre>结果为:<pre><code>I&apos;m a sexy man!
</code></pre></li>
<li>字母r放的字符串引号前面,可以让字符串内的全部符号输出本身,如:<pre><code>print(r&quot;你,\n给我等着...\n滚!&quot;)
</code></pre>结果为:<pre><code>你,\n给我等着...\n滚!
</code></pre>对比下面:<pre><code>print(&quot;你,\n给我等着...\n滚!&quot;)
</code></pre>结果为:<pre><code>你,
给我等着...
滚!
</code></pre></li>
</ul>
<h2 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h2><p>收整函数ROUND(参数1,参数2),如:</p>
<blockquote>
<p>round(1.23,1)=1.2<br>ROUND(1.23)=1</p>
</blockquote>
<p>即该函数无第二个参数即是四舍五入取整</p>
<h2 id="print用法详解"><a href="#print用法详解" class="headerlink" title="print用法详解"></a>print用法详解</h2><ul>
<li>说明文档</li>
</ul>
<blockquote>
<p>def print(<em>args, <strong>kwargs): # known special case of print<br>“””<br>print(value, …, sep=’ ‘, end=’\n’, file=sys.stdout)<br>Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments:  
</strong>file<strong>: a file-like object (stream); defaults to the current sys.stdout.   
</strong>sep<strong>: string inserted between values, default a space.   
</strong>end*</em>: string appended after the last value, default a newline.<br> “”” </p>
</blockquote>
<p> 即:print就是可以带参数的.</p>
<ul>
<li>参数end:</li>
</ul>
<p>结尾符,默认为回车:\n</p>
<pre><code>print(&apos;hello1&apos;)
print(&apos;hello2&apos;, end=&quot;\n&quot;)
print(&apos;hello3&apos;)
print(&apos;hello4&apos;, end=&quot;&quot;) #这是空字符串
print(&apos;hello5&apos;)
print(&apos;hello6&apos;, end=&quot; &quot;) #这是空格
print(&apos;hello7&apos;)
</code></pre><p>结果为:</p>
<pre><code>hello1
hello2
hello3
hello4hello5
hello6 hello7
</code></pre><ul>
<li><strong>参数:sep</strong></li>
</ul>
<p>各个值之间的连接符，默认是空格:” “</p>
<pre><code>print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;) 
print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, sep=&quot; &quot;) #一个空格
print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, sep=&quot;  &quot;) #两个空格
print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, sep=&quot;+&quot;) 
print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, sep=&quot;-&quot;) 
print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, sep=&quot;+-*/&quot;)
</code></pre><p>结果为:</p>
<pre><code>hello hello hello
hello hello hello
hello  hello  hello
hello+hello+hello
hello-hello-hello
hello+-*/hello+-*/hello
</code></pre><ul>
<li><strong>参数:file</strong></li>
</ul>
<p>file参数就是把print的结果输出到哪里去的作用。默认是系统标准输出，就是在交互shell里输出。</p>
<pre><code>with open(&apos;print_output.txt&apos;,&apos;w&apos;) as f:
     print(&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, sep=&quot;+-*/&quot;, file=f)
</code></pre><h2 id="字符串和编码-摘录链接"><a href="#字符串和编码-摘录链接" class="headerlink" title="字符串和编码:摘录链接"></a>字符串和编码:<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="external">摘录链接</a></h2><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。</p>
<p>由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。</p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。</p>
<p>你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>
<p>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>
<p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
<p>现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
<p>字母A用ASCII编码是十进制的65，二进制的01000001；</p>
<p>字符0用ASCII编码是十进制的48，二进制的00110000，注意字符’0’和整数0是不同的；</p>
<p>汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。</p>
<p>你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。</p>
<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">ASCII</th>
<th style="text-align:center">Unicode</th>
<th>UTF-8</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">01000001</td>
<td style="text-align:center">00000000 01</td>
<td>00000101000001</td>
</tr>
<tr>
<td style="text-align:center">中</td>
<td style="text-align:center">x</td>
<td style="text-align:center">01001110 00101101</td>
<td>111001001011100010101101</td>
</tr>
</tbody>
</table>
<p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>
<p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p>
<p><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</strong></p>
<p><strong>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</strong></p>
<p><strong>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</strong></p>
<p>所以你看到很多网页的源码上会有类似<meta charset="UTF-8">的信息，表示该网页正是用的UTF-8编码。</p>
<h3 id="Python的字符串编码转换"><a href="#Python的字符串编码转换" class="headerlink" title="Python的字符串编码转换"></a>Python的字符串编码转换</h3><p>搞清楚了令人头疼的字符编码问题后，我们再来研究Python的字符串。</p>
<p>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：</p>
<blockquote>
<p>print(‘包含中文的str’)<br>包含中文的str</p>
</blockquote>
<p>对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> ord(&apos;A&apos;)</div><div class="line">65</div><div class="line"></div><div class="line">ord(&apos;中&apos;)</div><div class="line">20013</div><div class="line"></div><div class="line">chr(66)</div><div class="line">&apos;B&apos;</div><div class="line"></div><div class="line">chr(25991)</div><div class="line">&apos;文&apos;</div></pre></td></tr></table></figure></p>
<p>如果知道字符的整数编码，还可以用十六进制这么写str：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;\u4e2d\u6587&apos;</div><div class="line">&apos;中文&apos;</div></pre></td></tr></table></figure></p>
<p>两种写法完全是等价的。</p>
<p>由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。</p>
<p>Python对bytes类型的数据用带b前缀的单引号或双引号表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x = b&apos;ABC&apos;</div></pre></td></tr></table></figure></p>
<p>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。</p>
<p><strong>以Unicode表示的str通过encode()方法可以编码为指定的bytes</strong>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&apos;ABC&apos;.encode(&apos;ascii&apos;)</div><div class="line">b&apos;ABC&apos;</div><div class="line"></div><div class="line">&apos;中文&apos;.encode(&apos;utf-8&apos;)</div><div class="line">b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;</div><div class="line"></div><div class="line">&apos;中文&apos;.encode(&apos;ascii&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-1: ordinal not in range(128)</div></pre></td></tr></table></figure></p>
<p>纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p>
<p>在bytes中，无法显示为ASCII字符的字节，用\x##显示。</p>
<p><strong>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> b&apos;ABC&apos;.decode(&apos;ascii&apos;)</div><div class="line">&apos;ABC&apos;</div><div class="line"></div><div class="line"> b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;.decode(&apos;utf-8&apos;)</div><div class="line">&apos;中文&apos;</div></pre></td></tr></table></figure></p>
<p>要计算str包含多少个字符，可以用len()函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">len(&apos;ABC&apos;)</div><div class="line">3</div><div class="line"></div><div class="line">len(&apos;中文&apos;)</div><div class="line">2</div></pre></td></tr></table></figure></p>
<p>len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">len(b&apos;ABC&apos;)</div><div class="line">3</div><div class="line"></div><div class="line">len(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;)</div><div class="line">6</div><div class="line"></div><div class="line">len(&apos;中文&apos;.encode(&apos;utf-8&apos;))</div><div class="line">6</div></pre></td></tr></table></figure></p>
<p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p>
<p>在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。</p>
<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"># -*- coding: utf-8 -*-</div></pre></td></tr></table></figure></p>
<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>
<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p>
<p><strong>申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用<code>UTF-8 without BOM</code>编码：</strong></p>
<p><strong>摘录自:</strong><a href="http://www.jianshu.com/p/1cb5ac8d8a6e?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用GitHub+Hexo搭建个人博客网站指南(Window版)]]></title>
      <url>http://cqxuxiaoping/github.io/2016/07/20/GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h2 id="前言絮语"><a href="#前言絮语" class="headerlink" title="前言絮语"></a>前言絮语</h2><p>前两天，我准备打开三年前开复老师孵化的”点点”轻博客，里面有我之前写的好些文章，结果打不开。才知道是运营不下去给关闭了。在这种情况下，我又注册了“简书”，准备用来做学习笔记并且分享之用。偶然才发现，“简书”是个好东东，既是轻博客，还结合当前形势开发有社交功能——可以很方便地关注你想关注的人、分享你喜欢的东西和自己写的东西；既可以私密保存，又可以发布分享。我又担心什么时候“简书”也给关闭了呢。于是乎，想起Python课程kingname老师所说的“几乎每个程序猿都有个GitHub账号”,无意之中了解了一下，就参照“简书”里他人分享的博客，加上勾搭度娘，利用白天工作的闲散时间及两个晚上的休息时间，前后合计花费十多个小时终于搭建好了目前这个样式的个人博客网站。其中遇到了非常多的坑坑，自己都一一查找资料反复试验解决掉。当然，还有些小功能还有待完善，比如七牛图片引用等还未完成，主要框架搭建好了，后续再努力搭建。</p>
<p>为了后续在家里电脑上再次搭建及分享给大家，故将搭建的主要步骤和方法写成指南（若写太细则太耗时间，并且各人电脑情况不一，多多少少会遇到不同的问题，附上参考资料，请参考使用），欢迎拍砖或打赏。</p>
<h2 id="应用准备"><a href="#应用准备" class="headerlink" title="应用准备"></a>应用准备</h2><ul>
<li><p>Git  <a href="https://git-scm.com/" target="_blank" rel="external">下载链接</a><br>1.用途:把本地的hexo内容提交到GitHub,以后多处会用到它。<br>2.需求:必须。<br>3.说明:如果你已经安装xcode，那已经默认集成git，不需要再继续安装它。<br>4.安装: 安装时建议勾选”Git Bash Here”，方便以后的操作,其他一路”Next”即可。 </p>
</li>
<li><p>Node.js  <a href="https://git-scm.com/" target="_blank" rel="external">下载链接</a><br>1.用途:用来生成静态页面<br>2.需求:必须。<br>3.安装: 安装简单,一路”Next”即可  </p>
</li>
<li><p>Notepad++   <a href="http://rj.baidu.com/soft/detail/13478.html?ald" target="_blank" rel="external">下载链接</a><br>1.用途:文本编辑器，用于修改配置文件。<br>2.需求:非必须,但最好用它,尽量不要用WIN系统自带的文本编辑器</p>
</li>
<li><p>MarkDown  <a href="http://markdownpad.com/download.html" target="_blank" rel="external">下载链接</a><br>1.用途:纯文本编辑器，用于写博客，特点是语法简单，生成的版面漂亮；编辑时有适当预览功能，左边编写，右边就显示效果<br>2.需求:非必须<br>3.本手册就是本人用MarkDown编写的<br>4.若提示”渲染失败”就没法编辑使用,则需安装软件:”awesomium_v1.6.6_sdk_win.exe”,方法:直接复制粘贴在浏览器里回车  </p>
</li>
</ul>
<h2 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h2><ul>
<li>说明<br>1.用途:生成静态页面<br>2.需求:必须  </li>
<li>搭建步骤<br>1.准备:先自己新建一个文件夹,用于安装存放所有hexo安装文件及自己要写的博客,比如我建的文件是:”E:\blog”<br>2.执行命令技巧:必须的Git和Node.js安装之后,凡是要求在本地执行的命令,均需在Git Bash中运行,方法是:进入第1步新建的文件夹,点击鼠标右键-&gt;Git Bash Here<br>3.操作方法:<a href="http://www.jianshu.com/p/465830080ea9?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">参考资料</a><br>3.1安装hexo:<br>以在我新建的目录”E:\blog”下为例,点击鼠标右键-&gt;Git Bash Here,运行第一行命令安装hexo:之后再执行第二行命令初始化hexo。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div><div class="line">hexo init</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><ul>
<li>说明<br>1.用途:用来做博客的远程创库、域名、服务器之类<br>2.需求:必须<br>3.<a href="https://github.com/" target="_blank" rel="external">网站链接</a></li>
<li>注册<br>1.申请方法:这里不再详解,请看他人分享的该部分教程:<a href="http://www.jianshu.com/p/a4b74cc9ff28" target="_blank" rel="external">GitHub账号申请教程</a><br>2.提示:<br>2.1 务必要验证,否则就未注册成功<br>2.1 我最初用网易邮箱申请,一直无法收到验证邮件,不得已换成QQ邮箱终于收到并验证成功  </li>
<li>SSH Key<br>1.用途:省略每次向GitHub推送静态博客命令”hexo d”反复输入用户名和密码<br>2.需求:非必须,若忽略该步骤,每次推送博客时必须输入用户名和密码<br>3.操作方法:<a href="http://www.jianshu.com/p/a2023a601ceb?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weixin" target="_blank" rel="external">参考链接</a><br>4.解决方案:若跟我一样在GitHub里将SSH Key添加进去后仍在git里执行”hexo d”命令后需要输入用户名和密码,用该方案即可解决(记得用Notepad++来改写配置文件哦) <a href="http://www.jianshu.com/p/81ae6e77ff47?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">参考链接</a>  </li>
</ul>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件:"></a>修改配置文件:</h2><p><a href="http://www.jianshu.com/p/a4b74cc9ff28?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">参考资料</a>,不要复制他的配置,有坑.如在我的目录”E:\blog”下找到配置文件”_config.yml”,用”Notepad++”打开编辑,注意空格不能少;我在这里遇到了大坑,我的这个文件里没啥内容,还是在网上找了两个进行合并配置的,分享如下,自己做适当改写即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">   ## Docs: http://hexo.io/docs/configuration.html</div><div class="line">   ## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line">   # Site</div><div class="line">   title: 表哥的Blog ##站点标题</div><div class="line">subtitle: Used for personal learning notes and sharing. ##站点副标题</div><div class="line">description: Life is to record! ##站点描述</div><div class="line">author: 表哥 ##作者</div><div class="line">language: zh-Hans ##语言包，需要主题自带才可设置。如Jcaman自带简繁英，设置简体中文一般填入 zh-CN,但我的主题NexT文档介绍的语言包是:zh-Hans</div><div class="line">timezone:</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://cqxuxiaoping/github.io ##改为自己的站点域名</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/ ##文章永久链接格式，可添加.html后缀，如 :title.html</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line"> enable: true</div><div class="line"> line_number: true</div><div class="line"> tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 5 ##设置每页显示文章数</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">#Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line">theme: NexT ##修改为自己当前的主题名称</div><div class="line"></div><div class="line"># Archives 默认值为2，如果这里都修改为1，相应页面就只会列出标题，而非全文(2: Enable pagination,1: Disable pagination,Fully Disable)</div><div class="line">archive: 1</div><div class="line">category: 1</div><div class="line">tag: 1</div><div class="line"></div><div class="line"># Deployment</div><div class="line">#Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line"> type: git #此处有的是:github</div><div class="line"> repo: https://github.com/cqxuxiaoping/cqxuxiaoping.github.io.git ##自己在GitHub注册的,按此格式改写即可,我的用户名是:cqxuxiaoping</div><div class="line"> branch: master</div></pre></td></tr></table></figure></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>1.生成静态页面<br>执行命令:注意:必须到你新建的hexo安装目录下,如我的”E:\blog”执行，否则不成功.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate #可简写:hexo g</div></pre></td></tr></table></figure></p>
<p>2.本地测试:<br>执行完下列命令后,此时按提示在浏览器输入 <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a> 即是博客预览效果,若是404页面,返回上面检查配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server  #简写为:hexo s</div></pre></td></tr></table></figure></p>
<p>3.正式部署:<br>执行完下列命令,若最后一行为:”INFO  Deploy done: git”则说明成功,就可以进入自己的GitHub域名下查看自己的博客了;<br>4.查看地址:<a href="https://cqxuxiaoping.github.io/,其中,&quot;cqxuxiaoping&quot;是我的登录名,改为自己的即可" target="_blank" rel="external">https://cqxuxiaoping.github.io/,其中,&quot;cqxuxiaoping&quot;是我的登录名,改为自己的即可</a>.<br>5.博客存放目录:<br>E:\blog\source_posts,”E:\blog”是我建的文件夹,改为自己的即可<br>6.部署说明:<br>以后每次推送博客都需在如我的”E:\blog”目录下启动Git Brash,依次执行下列三行命令(提示:”hexo s”命令是预览生成的静博客,搭建好后可以不再用它)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean #清除缓存</div><div class="line">hexo g #重新生成最新的静态博客</div><div class="line">hexo d #将静态博客推送到GitHub托管</div></pre></td></tr></table></figure></p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名:"></a>域名:</h2><p>专业玩家可以去购买域名,我等就没必要,略过…  </p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题:"></a>主题:</h2><ul>
<li>若使用默认主题就不需要折腾了,若想要个自己喜欢的主题,要费些周折,具体不表,请看:<a href="http://www.jianshu.com/p/5e9bd5e39ae6" target="_blank" rel="external">参考资料</a>  </li>
<li>主题的开发者写的配置方法文档,仔细参考:<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">链接</a><h2 id="添加”多说”评论系统"><a href="#添加”多说”评论系统" class="headerlink" title="添加”多说”评论系统:"></a>添加”多说”评论系统:</h2></li>
</ul>
<p>不详说,看:<a href="http://www.jianshu.com/p/a4b74cc9ff28?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">参考资料</a>  </p>
<hr>
<h2 id="感谢及其他"><a href="#感谢及其他" class="headerlink" title="感谢及其他:"></a>感谢及其他:</h2><ul>
<li>感谢上述链接参考资料作者以及我的Python课程Kingname老师,没有他们的分享参考,我无法搭建成功!  </li>
<li>欢迎访问本人搭建的博客网址:<a href="https://cqxuxiaoping.github.io/" target="_blank" rel="external">https://cqxuxiaoping.github.io/</a></li>
<li>因博客托管在GitHub,服务器在美国,速度不会快,要有耐心,:-)</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
